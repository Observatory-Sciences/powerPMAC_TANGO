/*----- PROTECTED REGION ID(PowerPMACAxes.h) ENABLED START -----*/
//=============================================================================
//
// file :        PowerPMACAxes.h
//
// description : Include for the PowerPMACAxes class.
//
// project :     Power PMAC Axes.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef POWERPMACAXES_H
#define POWERPMACAXES_H


#include <tango.h>
#include <PowerPMACcontrol.h>
/*----- PROTECTED REGION END -----*/


/**
 *	PowerPMACAxes class Description:
 *	Send axes command and read axes data from Power PMAC.
 */

namespace PowerPMACAxes_ns
{
	/*----- PROTECTED REGION ID(PowerPMACAxes::Additional Class Declarations) ENABLED START -----*/

		//		Additional Class Declarations

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::Additional Class Declarations


class PowerPMACAxes : public Tango::Device_4Impl
{


	/*----- PROTECTED REGION ID(PowerPMACAxes::Data Members) ENABLED START -----*/

	//		Add your own data members
    PowerPMACcontrol_ns::PowerPMACcontrol* ppmaccontrol;
	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::Data Members


//	Device property data members
public:		//	IpAddress:	IP Address of a Power PMAC
	string	ipAddress;
	//	Username:	Username for Power PMAC SSH connection
	string	username;
	//	Password:	Password for Power PMAC SSH connection
	string	password;
	

//	Attribute data members
public:
	Tango::DevDouble	*attr_Axis1CurrentPosition_read;
	Tango::DevString	*attr_Motor1Status_read;
	Tango::DevBoolean	*attr_Axis1Powered_read;
	Tango::DevString	*attr_CS1Status_read;
	Tango::DevDouble	*attr_Axis1DeadBand_read;
	Tango::DevDouble	*attr_Axis1Speed_read;
	Tango::DevDouble	*attr_Axis1Acceleration_read;
	Tango::DevDouble	*attr_Axes1to3Positions_read;
	Tango::DevString	*attr_Motor1to3Status_read;
	Tango::DevString	*attr_CS1to3Status_read;
	Tango::DevDouble	*attr_Axes1to3Velocities_read;
	Tango::DevDouble	*attr_Axis1SoftwareLimits_read;



//	Constructors and destructors
public:
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	PowerPMACAxes(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	PowerPMACAxes(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	PowerPMACAxes(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The object destructor.
	 */	
	~PowerPMACAxes() {delete_device();};



//	Miscellaneous methods
public:
	/**
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/**
	 *	Initialize the device
	 */
	virtual void init_device();
	/**
	 *	Read the device properties from database
	 */
	 void get_device_property();
	/**
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	/**
	 *	Method      : PowerPMACAxes::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	virtual void read_attr_hardware(vector<long> &attr_list);


	/**
	 *	Axis1CurrentPosition attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar 
	 */
	virtual void read_Axis1CurrentPosition(Tango::Attribute &attr);
	virtual bool is_Axis1CurrentPosition_allowed(Tango::AttReqType type);



	/**
	 *	Motor1Status attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevString
	 *	Attr type:	Scalar 
	 */
	virtual void read_Motor1Status(Tango::Attribute &attr);
	virtual bool is_Motor1Status_allowed(Tango::AttReqType type);



	/**
	 *	Axis1Powered attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevBoolean
	 *	Attr type:	Scalar 
	 */
	virtual void read_Axis1Powered(Tango::Attribute &attr);
	virtual bool is_Axis1Powered_allowed(Tango::AttReqType type);



	/**
	 *	CS1Status attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevString
	 *	Attr type:	Scalar 
	 */
	virtual void read_CS1Status(Tango::Attribute &attr);
	virtual bool is_CS1Status_allowed(Tango::AttReqType type);



	/**
	 *	Axis1DeadBand attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar 
	 */
	virtual void read_Axis1DeadBand(Tango::Attribute &attr);
	virtual void write_Axis1DeadBand(Tango::WAttribute &attr);
	virtual bool is_Axis1DeadBand_allowed(Tango::AttReqType type);



	/**
	 *	Axis1Speed attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar 
	 */
	virtual void read_Axis1Speed(Tango::Attribute &attr);
	virtual void write_Axis1Speed(Tango::WAttribute &attr);
	virtual bool is_Axis1Speed_allowed(Tango::AttReqType type);



	/**
	 *	Axis1Acceleration attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar 
	 */
	virtual void read_Axis1Acceleration(Tango::Attribute &attr);
	virtual void write_Axis1Acceleration(Tango::WAttribute &attr);
	virtual bool is_Axis1Acceleration_allowed(Tango::AttReqType type);



	/**
	 *	Axes1to3Positions attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Spectrum  max = 3
	 */
	virtual void read_Axes1to3Positions(Tango::Attribute &attr);
	virtual bool is_Axes1to3Positions_allowed(Tango::AttReqType type);



	/**
	 *	Motor1to3Status attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevString
	 *	Attr type:	Spectrum  max = 3
	 */
	virtual void read_Motor1to3Status(Tango::Attribute &attr);
	virtual bool is_Motor1to3Status_allowed(Tango::AttReqType type);



	/**
	 *	CS1to3Status attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevString
	 *	Attr type:	Spectrum  max = 3
	 */
	virtual void read_CS1to3Status(Tango::Attribute &attr);
	virtual bool is_CS1to3Status_allowed(Tango::AttReqType type);



	/**
	 *	Axes1to3Velocities attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Spectrum  max = 3
	 */
	virtual void read_Axes1to3Velocities(Tango::Attribute &attr);
	virtual bool is_Axes1to3Velocities_allowed(Tango::AttReqType type);



	/**
	 *	Axis1SoftwareLimits attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Spectrum  max = 2
	 */
	virtual void read_Axis1SoftwareLimits(Tango::Attribute &attr);
	virtual void write_Axis1SoftwareLimits(Tango::WAttribute &attr);
	virtual bool is_Axis1SoftwareLimits_allowed(Tango::AttReqType type);



	/**
	 *	Method      : PowerPMACAxes::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
		void add_dynamic_attributes();

//	Command related methods
public: 


	/**
	 *	Command AxisHome related methods.
	 */
	void axis_home(Tango::DevLong argin);
	virtual bool is_AxisHome_allowed(const CORBA::Any &any);

	/**
	 *	Command AxisStop related methods.
	 */
	void axis_stop(Tango::DevLong argin);
	virtual bool is_AxisStop_allowed(const CORBA::Any &any);

	/**
	 *	Command AxisAbort related methods.
	 */
	void axis_abort(Tango::DevLong argin);
	virtual bool is_AxisAbort_allowed(const CORBA::Any &any);

	/**
	 *	Command AxisMovePositive related methods.
	 */
	void axis_move_positive(Tango::DevLong argin);
	virtual bool is_AxisMovePositive_allowed(const CORBA::Any &any);

	/**
	 *	Command AxisMoveNegative related methods.
	 */
	void axis_move_negative(Tango::DevLong argin);
	virtual bool is_AxisMoveNegative_allowed(const CORBA::Any &any);

	/**
	 *	Command Axis1MoveAbs related methods.
	 */
	void axis1_move_abs(Tango::DevDouble argin);
	virtual bool is_Axis1MoveAbs_allowed(const CORBA::Any &any);

	/**
	 *	Command Axis1MoveRel related methods.
	 */
	void axis1_move_rel(Tango::DevDouble argin);
	virtual bool is_Axis1MoveRel_allowed(const CORBA::Any &any);

	/**
	 *	Command Axis1DefinePosition related methods.
	 */
	void axis1_define_position(Tango::DevDouble argin);
	virtual bool is_Axis1DefinePosition_allowed(const CORBA::Any &any);



	/*----- PROTECTED REGION ID(PowerPMACAxes::Additional Method prototypes) ENABLED START -----*/

	//	Additional Method prototypes

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::Additional Method prototypes

};

	/*----- PROTECTED REGION ID(PowerPMACAxes::Additional Classes Definitions) ENABLED START -----*/

	//	Additional Classes definitions

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::Additional Classes Definitions

} //	namespace

#endif	//	POWERPMACAXES_H
