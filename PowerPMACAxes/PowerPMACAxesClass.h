/*----- PROTECTED REGION ID(PowerPMACAxesClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        PowerPMACAxesClass.h
//
// description : Include for the PowerPMACAxesClass root class.
//               This class is the singleton class for.
//               the PowerPMACAxes device class..
//               It contains all properties and methods which the .
//               PowerPMACAxes requires only once e.g. the commands.
//
// project :     Power PMAC Axes.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef POWERPMACAXESCLASS_H
#define POWERPMACAXESCLASS_H

#include <tango.h>
#include <PowerPMACAxes.h>

/*----- PROTECTED REGION END -----*/

namespace PowerPMACAxes_ns
{
	/*----- PROTECTED REGION ID(PowerPMACAxes::classes for dynamic creation) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::classes for dynamic creation



//=========================================
//	Define classes for attributes
//=========================================
//	Attribute Axis1CurrentPosition class definition
class Axis1CurrentPositionAttrib: public Tango::Attr
{
public:
	Axis1CurrentPositionAttrib():Attr("Axis1CurrentPosition",
	                   Tango::DEV_DOUBLE, Tango::READ) {};
	~Axis1CurrentPositionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<PowerPMACAxes *>(dev))->read_Axis1CurrentPosition(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<PowerPMACAxes *>(dev))->is_Axis1CurrentPosition_allowed(ty);}
};

//	Attribute Motor1Status class definition
class Motor1StatusAttrib: public Tango::Attr
{
public:
	Motor1StatusAttrib():Attr("Motor1Status",
	                   Tango::DEV_STRING, Tango::READ) {};
	~Motor1StatusAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<PowerPMACAxes *>(dev))->read_Motor1Status(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<PowerPMACAxes *>(dev))->is_Motor1Status_allowed(ty);}
};

//	Attribute Axis1Powered class definition
class Axis1PoweredAttrib: public Tango::Attr
{
public:
	Axis1PoweredAttrib():Attr("Axis1Powered",
	                   Tango::DEV_BOOLEAN, Tango::READ) {};
	~Axis1PoweredAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<PowerPMACAxes *>(dev))->read_Axis1Powered(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<PowerPMACAxes *>(dev))->is_Axis1Powered_allowed(ty);}
};

//	Attribute CS1Status class definition
class CS1StatusAttrib: public Tango::Attr
{
public:
	CS1StatusAttrib():Attr("CS1Status",
	                   Tango::DEV_STRING, Tango::READ) {};
	~CS1StatusAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<PowerPMACAxes *>(dev))->read_CS1Status(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<PowerPMACAxes *>(dev))->is_CS1Status_allowed(ty);}
};

//	Attribute Axis1DeadBand class definition
class Axis1DeadBandAttrib: public Tango::Attr
{
public:
	Axis1DeadBandAttrib():Attr("Axis1DeadBand",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Axis1DeadBandAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<PowerPMACAxes *>(dev))->read_Axis1DeadBand(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<PowerPMACAxes *>(dev))->write_Axis1DeadBand(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<PowerPMACAxes *>(dev))->is_Axis1DeadBand_allowed(ty);}
};

//	Attribute Axis1Speed class definition
class Axis1SpeedAttrib: public Tango::Attr
{
public:
	Axis1SpeedAttrib():Attr("Axis1Speed",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Axis1SpeedAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<PowerPMACAxes *>(dev))->read_Axis1Speed(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<PowerPMACAxes *>(dev))->write_Axis1Speed(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<PowerPMACAxes *>(dev))->is_Axis1Speed_allowed(ty);}
};

//	Attribute Axis1Acceleration class definition
class Axis1AccelerationAttrib: public Tango::Attr
{
public:
	Axis1AccelerationAttrib():Attr("Axis1Acceleration",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~Axis1AccelerationAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<PowerPMACAxes *>(dev))->read_Axis1Acceleration(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<PowerPMACAxes *>(dev))->write_Axis1Acceleration(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<PowerPMACAxes *>(dev))->is_Axis1Acceleration_allowed(ty);}
};

//	Attribute Axes1to3Positions class definition
class Axes1to3PositionsAttrib: public Tango::SpectrumAttr
{
public:
	Axes1to3PositionsAttrib():SpectrumAttr("Axes1to3Positions",
	                   Tango::DEV_DOUBLE, Tango::READ, 3) {};
	~Axes1to3PositionsAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<PowerPMACAxes *>(dev))->read_Axes1to3Positions(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<PowerPMACAxes *>(dev))->is_Axes1to3Positions_allowed(ty);}
};

//	Attribute Motor1to3Status class definition
class Motor1to3StatusAttrib: public Tango::SpectrumAttr
{
public:
	Motor1to3StatusAttrib():SpectrumAttr("Motor1to3Status",
	                   Tango::DEV_STRING, Tango::READ, 3) {};
	~Motor1to3StatusAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<PowerPMACAxes *>(dev))->read_Motor1to3Status(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<PowerPMACAxes *>(dev))->is_Motor1to3Status_allowed(ty);}
};

//	Attribute CS1to3Status class definition
class CS1to3StatusAttrib: public Tango::SpectrumAttr
{
public:
	CS1to3StatusAttrib():SpectrumAttr("CS1to3Status",
	                   Tango::DEV_STRING, Tango::READ, 3) {};
	~CS1to3StatusAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<PowerPMACAxes *>(dev))->read_CS1to3Status(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<PowerPMACAxes *>(dev))->is_CS1to3Status_allowed(ty);}
};

//	Attribute Axes1to3Velocities class definition
class Axes1to3VelocitiesAttrib: public Tango::SpectrumAttr
{
public:
	Axes1to3VelocitiesAttrib():SpectrumAttr("Axes1to3Velocities",
	                   Tango::DEV_DOUBLE, Tango::READ, 3) {};
	~Axes1to3VelocitiesAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<PowerPMACAxes *>(dev))->read_Axes1to3Velocities(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<PowerPMACAxes *>(dev))->is_Axes1to3Velocities_allowed(ty);}
};

//	Attribute Axis1SoftwareLimits class definition
class Axis1SoftwareLimitsAttrib: public Tango::SpectrumAttr
{
public:
	Axis1SoftwareLimitsAttrib():SpectrumAttr("Axis1SoftwareLimits",
	                   Tango::DEV_DOUBLE, Tango::READ_WRITE, 2) {};
	~Axis1SoftwareLimitsAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<PowerPMACAxes *>(dev))->read_Axis1SoftwareLimits(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<PowerPMACAxes *>(dev))->write_Axis1SoftwareLimits(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<PowerPMACAxes *>(dev))->is_Axis1SoftwareLimits_allowed(ty);}
};





//=========================================
//	Define classes for commands
//=========================================
//	Command AxisHome class definition
class AxisHomeClass : public Tango::Command
{
public:
	AxisHomeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AxisHomeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AxisHomeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PowerPMACAxes *>(dev))->is_AxisHome_allowed(any);}
};

//	Command AxisStop class definition
class AxisStopClass : public Tango::Command
{
public:
	AxisStopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AxisStopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AxisStopClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PowerPMACAxes *>(dev))->is_AxisStop_allowed(any);}
};

//	Command AxisAbort class definition
class AxisAbortClass : public Tango::Command
{
public:
	AxisAbortClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AxisAbortClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AxisAbortClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PowerPMACAxes *>(dev))->is_AxisAbort_allowed(any);}
};

//	Command AxisMovePositive class definition
class AxisMovePositiveClass : public Tango::Command
{
public:
	AxisMovePositiveClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AxisMovePositiveClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AxisMovePositiveClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PowerPMACAxes *>(dev))->is_AxisMovePositive_allowed(any);}
};

//	Command AxisMoveNegative class definition
class AxisMoveNegativeClass : public Tango::Command
{
public:
	AxisMoveNegativeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AxisMoveNegativeClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AxisMoveNegativeClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PowerPMACAxes *>(dev))->is_AxisMoveNegative_allowed(any);}
};

//	Command Axis1MoveAbs class definition
class Axis1MoveAbsClass : public Tango::Command
{
public:
	Axis1MoveAbsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	Axis1MoveAbsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~Axis1MoveAbsClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PowerPMACAxes *>(dev))->is_Axis1MoveAbs_allowed(any);}
};

//	Command Axis1MoveRel class definition
class Axis1MoveRelClass : public Tango::Command
{
public:
	Axis1MoveRelClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	Axis1MoveRelClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~Axis1MoveRelClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PowerPMACAxes *>(dev))->is_Axis1MoveRel_allowed(any);}
};

//	Command Axis1DefinePosition class definition
class Axis1DefinePositionClass : public Tango::Command
{
public:
	Axis1DefinePositionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	Axis1DefinePositionClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~Axis1DefinePositionClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PowerPMACAxes *>(dev))->is_Axis1DefinePosition_allowed(any);}
};





/**
 *	The TemplateDevServClass singleton definition
 */

class
#ifdef _TG_WINDOWS_
	__declspec(dllexport)
#endif
	PowerPMACAxesClass : public Tango::DeviceClass
{
	/*----- PROTECTED REGION ID(PowerPMACAxes::Additionnal DServer data members) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::Additionnal DServer data members



public:
//	write class properties data members
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static PowerPMACAxesClass *init(const char *);
	static PowerPMACAxesClass *instance();
	~PowerPMACAxesClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	PowerPMACAxesClass(string &);
	static PowerPMACAxesClass *_instance;
	void command_factory();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	void get_class_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
	void create_static_attribute_list(vector<Tango::Attr *> &);
	void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
	vector<string>	defaultAttList;


};

}	//	namespace

#endif	//	POWERPMACAXESCLASS_H

