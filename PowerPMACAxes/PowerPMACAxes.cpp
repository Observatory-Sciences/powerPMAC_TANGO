/*----- PROTECTED REGION ID(PowerPMACAxes.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        PowerPMACAxes.cpp
//
// description : C++ source for the PowerPMACAxes and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               PowerPMACAxes are implemented in this file.
//
// project :     Power PMAC Axes.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <vector>
#include <sstream>
#include <iomanip>
#include <PowerPMACAxes.h>
#include <PowerPMACAxesClass.h>

/* Some versions of MS Visual Studio don't have stdint.h,
   so define uint32_t and uint64_t here */
#ifdef _MSC_VER
typedef __int32 int32_t;
typedef unsigned __int32 uint32_t;
typedef __int64 int64_t;
typedef unsigned __int64 uint64_t;
#else
#include <stdint.h>
#endif

/*----- PROTECTED REGION END -----*/


/**
 *	PowerPMACAxes class description:
 *	Send axes command and read axes data from Power PMAC.
 */

//================================================================
//
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name         |  Method name
//----------------------------------------------------------------
//  State                |  Inherited (no method)
//  Status               |  Inherited (no method)
//  AxisHome             |  axis_home
//  AxisStop             |  axis_stop
//  AxisAbort            |  axis_abort
//  AxisMovePositive     |  axis_move_positive
//  AxisMoveNegative     |  axis_move_negative
//  Axis1MoveAbs         |  axis1_move_abs
//  Axis1MoveRel         |  axis1_move_rel
//  Axis1DefinePosition  |  axis1_define_position
//================================================================

namespace PowerPMACAxes_ns
{
	/*----- PROTECTED REGION ID(PowerPMACAxes::namespace_starting) ENABLED START -----*/

	//	static initializations

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::namespace_starting



//--------------------------------------------------------
/**
 *	Method      : PowerPMACAxes::PowerPMACAxes()
 *	Description : Constructors for a Tango device
 *	              implementing the class PowerPMACAxes
 */
//--------------------------------------------------------
PowerPMACAxes::PowerPMACAxes(Tango::DeviceClass *cl, string &s)
 	: Tango::Device_4Impl(cl, s.c_str())
{
    ppmaccontrol=0;
	/*----- PROTECTED REGION ID(PowerPMACAxes::constructor_1) ENABLED START -----*/
    
	init_device();

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::constructor_1
}
//--------------------------------------------------------
PowerPMACAxes::PowerPMACAxes(Tango::DeviceClass *cl, const char *s)
 	: Tango::Device_4Impl(cl, s)
{
    ppmaccontrol=0;
	/*----- PROTECTED REGION ID(PowerPMACAxes::constructor_2) ENABLED START -----*/
    
	init_device();

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::constructor_2
}
//--------------------------------------------------------
PowerPMACAxes::PowerPMACAxes(Tango::DeviceClass *cl, const char *s, const char *d)
 	: Tango::Device_4Impl(cl, s, d)
{
    ppmaccontrol=0;
	/*----- PROTECTED REGION ID(PowerPMACAxes::constructor_3) ENABLED START -----*/
    
	init_device();

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::constructor_3
}


//--------------------------------------------------------
/**
 *	Method      : PowerPMACAxes::delete_device()()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void PowerPMACAxes::delete_device()
{
	/*----- PROTECTED REGION ID(PowerPMACAxes::delete_device) ENABLED START -----*/

	//	Delete device allocated objects
   //std::cout << "PowerPMACAxes::delete_device() called" << std::endl;
    if (ppmaccontrol != 0)
    {
        ppmaccontrol->PowerPMACcontrol_disconnect();
        delete ppmaccontrol;
    }
	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::delete_device
	delete[] attr_Axis1CurrentPosition_read;
	delete[] attr_Motor1Status_read;
	delete[] attr_Axis1Powered_read;
	delete[] attr_CS1Status_read;
	delete[] attr_Axis1DeadBand_read;
	delete[] attr_Axis1Speed_read;
	delete[] attr_Axis1Acceleration_read;
	delete[] attr_Axes1to3Positions_read;
	delete[] attr_Motor1to3Status_read;
	delete[] attr_CS1to3Status_read;
	delete[] attr_Axes1to3Velocities_read;
	delete[] attr_Axis1SoftwareLimits_read;
	
}


//--------------------------------------------------------
/**
 *	Method      : PowerPMACAxes::init_device()
 *	Description : //	will be called at device initialization.
 */
//--------------------------------------------------------
void PowerPMACAxes::init_device()
{
	DEBUG_STREAM << "PowerPMACAxes::init_device() create device " << device_name << endl;

	/*----- PROTECTED REGION ID(PowerPMACAxes::init_device_before) ENABLED START -----*/

	//	Initialization before get_device_property() call

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::init_device_before
	
	//	Get the device properties (if any) from database
	get_device_property();
	
	attr_Axis1CurrentPosition_read = new Tango::DevDouble[1];
	attr_Motor1Status_read = new Tango::DevString[1];
	attr_Axis1Powered_read = new Tango::DevBoolean[1];
	attr_CS1Status_read = new Tango::DevString[1];
	attr_Axis1DeadBand_read = new Tango::DevDouble[1];
	attr_Axis1Speed_read = new Tango::DevDouble[1];
	attr_Axis1Acceleration_read = new Tango::DevDouble[1];
	attr_Axes1to3Positions_read = new Tango::DevDouble[3];
	attr_Motor1to3Status_read = new Tango::DevString[3];
	attr_CS1to3Status_read = new Tango::DevString[3];
	attr_Axes1to3Velocities_read = new Tango::DevDouble[3];
	attr_Axis1SoftwareLimits_read = new Tango::DevDouble[2];
	
	/*----- PROTECTED REGION ID(PowerPMACAxes::init_device) ENABLED START -----*/

	//	Initialize device
    //std::cout << "PowerPMACAxes::init device called" << endl;
    if (ppmaccontrol == 0)
    {
        //std::cout << "PowerPMACBox::ppmaccontrol is zero" << endl;
        ppmaccontrol = new PowerPMACcontrol_ns::PowerPMACcontrol();
    }
    //else
        //std::cout << "PowerPMACBox::ppmaccontrol is not zero" << endl;

    //std::cout << "PowerPMACAxes Calling connect with " << ipAddress << ", " << username << ", " << password << endl;
    int ret = ppmaccontrol->PowerPMACcontrol_connect(ipAddress.c_str(), username.c_str(), password.c_str());
    DEBUG_STREAM << "PowerPMACBox::on() ppmaccontrol->connect return is  " << ret << endl;

    if (ret != PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
    {
        this->set_status("Failed to connect to the Power PMAC.");
        this->set_state(Tango::OFF);
    }
    else
    {
        this->set_status("Connected to the Power PMAC.");
        this->set_state(Tango::ON);
    }


	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::init_device
}



//--------------------------------------------------------
/**
 *	Method      : PowerPMACAxes::get_device_property()
 *	Description : //	Add your own code to initialize
 */
//--------------------------------------------------------
void PowerPMACAxes::get_device_property()
{
	/*----- PROTECTED REGION ID(PowerPMACAxes::get_device_property_before) ENABLED START -----*/

	//	Initialize property data members

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("IpAddress"));
	dev_prop.push_back(Tango::DbDatum("Username"));
	dev_prop.push_back(Tango::DbDatum("Password"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on PowerPMACAxesClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		PowerPMACAxesClass	*ds_class =
			(static_cast<PowerPMACAxesClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize IpAddress from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  ipAddress;
		else {
			//	Try to initialize IpAddress from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  ipAddress;
		}
		//	And try to extract IpAddress value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  ipAddress;

		//	Try to initialize Username from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  username;
		else {
			//	Try to initialize Username from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  username;
		}
		//	And try to extract Username value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  username;

		//	Try to initialize Password from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  password;
		else {
			//	Try to initialize Password from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  password;
		}
		//	And try to extract Password value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  password;


	}
	/*----- PROTECTED REGION ID(PowerPMACAxes::get_device_property_after) ENABLED START -----*/

	//	Check device property data members init

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::get_device_property_after

}

//--------------------------------------------------------
/**
 *	Method      : PowerPMACAxes::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void PowerPMACAxes::always_executed_hook()
{
	INFO_STREAM << "PowerPMACAxes::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::always_executed_hook) ENABLED START -----*/

	//	code always executed before all requests

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::always_executed_hook
}



//--------------------------------------------------------
/**
 *	Method      : PowerPMACAxes::read_attr_hardware()
 *	Description : Hardware acquisition for attributes.
 */
//--------------------------------------------------------
void PowerPMACAxes::read_attr_hardware(vector<long> &attr_list)
{
	DEBUG_STREAM << "PowerPMACAxes::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::read_attr_hardware) ENABLED START -----*/

	//	Add your own code

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::read_attr_hardware

}


//--------------------------------------------------------
/**
 *	Read Axis1CurrentPosition attribute
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void PowerPMACAxes::read_Axis1CurrentPosition(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMACAxes::read_Axis1CurrentPosition(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::read_Axis1CurrentPosition) ENABLED START -----*/
    double d = 0.0;
    int ret =  ppmaccontrol->PowerPMACcontrol_axisGetCurrentPosition(1, d);
    if (ret == PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
    {
        *attr_Axis1CurrentPosition_read = d;
        //	Set the attribute value
        attr.set_value(attr_Axis1CurrentPosition_read);
    }
    else
    {
        std::ostringstream s;
        s << "Failed to get Axis 1 current position. Error number is " << ret << endl;
        this->set_status(s.str());
    }


	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::read_Axis1CurrentPosition
}
//--------------------------------------------------------
/**
 *	Read Motor1Status attribute
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void PowerPMACAxes::read_Motor1Status(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMACAxes::read_Motor1Status(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::read_Motor1Status) ENABLED START -----*/


    uint64_t status64;
    int ret =  ppmaccontrol->PowerPMACcontrol_getMotorStatus(1, status64);
    if (ret == PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
    {
        std::stringstream stream;
        stream << std::hex << std::setw(16) << std::setfill('0') << status64;
        std::string sstatus;
        stream >> sstatus;
        *attr_Motor1Status_read = Tango::string_dup(sstatus.c_str());
	//	Set the attribute value
	attr.set_value(attr_Motor1Status_read);
    }
    else
    {
        std::ostringstream s;
        s << "Failed to get Motor 1 status. Error number is " << ret << endl;
        this->set_status(s.str());
    }

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::read_Motor1Status
}
//--------------------------------------------------------
/**
 *	Read Axis1Powered attribute
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void PowerPMACAxes::read_Axis1Powered(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMACAxes::read_Axis1Powered(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::read_Axis1Powered) ENABLED START -----*/
    bool b = false;
    int ret =  ppmaccontrol->PowerPMACcontrol_motorPowered(1, b);
    if (ret == PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
    {
        *attr_Axis1Powered_read = b;
        //	Set the attribute value
        attr.set_value(attr_Axis1Powered_read);
    }
    else
    {
        std::ostringstream s;
        s << "Failed to get Axis 1 Powered state. Error number is " << ret << endl;
        this->set_status(s.str());
    }

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::read_Axis1Powered
}
//--------------------------------------------------------
/**
 *	Read CS1Status attribute
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void PowerPMACAxes::read_CS1Status(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMACAxes::read_CS1Status(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::read_CS1Status) ENABLED START -----*/
    uint64_t status64;
    int ret =  ppmaccontrol->PowerPMACcontrol_getCoordStatus(2, status64);
    if (ret == PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
    {
        std::stringstream stream;
        stream << std::hex << std::setw(16) << std::setfill('0') << status64;
        std::string sstatus;
        stream >> sstatus;
        *attr_CS1Status_read = Tango::string_dup(sstatus.c_str());
        //	Set the attribute value
        attr.set_value(attr_CS1Status_read);
    }
    else
    {
        std::ostringstream s;
        s << "Failed to get CS 1 status. Error number is " << ret << endl;
        this->set_status(s.str());
    }

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::read_CS1Status
}
//--------------------------------------------------------
/**
 *	Read Axis1DeadBand attribute
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void PowerPMACAxes::read_Axis1DeadBand(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMACAxes::read_Axis1DeadBand(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::read_Axis1DeadBand) ENABLED START -----*/


    double d = 0.0;
    int ret =  ppmaccontrol->PowerPMACcontrol_axisGetDeadband(1, d);
    if (ret == PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
    {
        *attr_Axis1DeadBand_read = d;
        //	Set the attribute value
        attr.set_value(attr_Axis1DeadBand_read);
    }
    else
    {
        std::ostringstream s;
        s << "Failed to get Axis 1 deadband. Error number is " << ret << endl;
        this->set_status(s.str());
    }

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::read_Axis1DeadBand
}

//--------------------------------------------------------
/**
 *	Write Axis1DeadBand attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void PowerPMACAxes::write_Axis1DeadBand(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PowerPMACAxes::write_Axis1DeadBand(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(PowerPMACAxes::write_Axis1DeadBand) ENABLED START -----*/
    int ret =ppmaccontrol->PowerPMACcontrol_axisSetDeadband(1, w_val);
	if (ret != PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
    {
        
        
        std::ostringstream s;
        s << "Failed to set Axis 1 deadband. Error number is " << ret << endl;
        this->set_status(s.str());
    }
	

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::write_Axis1DeadBand
}

//--------------------------------------------------------
/**
 *	Read Axis1Speed attribute
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void PowerPMACAxes::read_Axis1Speed(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMACAxes::read_Axis1Speed(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::read_Axis1Speed) ENABLED START -----*/


    double d = 0.0;
    int ret =  ppmaccontrol->PowerPMACcontrol_axisGetVelocity(1, d);
    if (ret == PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
    {
        *attr_Axis1Speed_read = d;
        //	Set the attribute value
        attr.set_value(attr_Axis1Speed_read);
    }
    else
    {
        std::ostringstream s;
        s << "Failed to get Axis 1 Velocity. Error number is " << ret << endl;
        this->set_status(s.str());
    }

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::read_Axis1Speed
}

//--------------------------------------------------------
/**
 *	Write Axis1Speed attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void PowerPMACAxes::write_Axis1Speed(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PowerPMACAxes::write_Axis1Speed(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(PowerPMACAxes::write_Axis1Speed) ENABLED START -----*/
    int ret =ppmaccontrol->PowerPMACcontrol_axisSetVelocity(1, w_val);
	if (ret != PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
    {
        
        
        std::ostringstream s;
        s << "Failed to set Axis 1 velocity. Error number is " << ret << endl;
        this->set_status(s.str());
    }
	

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::write_Axis1Speed
}

//--------------------------------------------------------
/**
 *	Read Axis1Acceleration attribute
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void PowerPMACAxes::read_Axis1Acceleration(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMACAxes::read_Axis1Acceleration(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::read_Axis1Acceleration) ENABLED START -----*/

    double d = 0.0;
    int ret =  ppmaccontrol->PowerPMACcontrol_axisGetAcceleration(1, d);
    if (ret == PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
    {
        *attr_Axis1Acceleration_read = d;

	//	Set the attribute value
	attr.set_value(attr_Axis1Acceleration_read);
    }
    else
    {
        std::ostringstream s;
        s << "Failed to get Axis 1 Acceleration. Error number is " << ret << endl;
        this->set_status(s.str());
    }

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::read_Axis1Acceleration
}

//--------------------------------------------------------
/**
 *	Write Axis1Acceleration attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar 
 */
//--------------------------------------------------------
void PowerPMACAxes::write_Axis1Acceleration(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PowerPMACAxes::write_Axis1Acceleration(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(PowerPMACAxes::write_Axis1Acceleration) ENABLED START -----*/
    int ret =ppmaccontrol->PowerPMACcontrol_axisSetAcceleration(1, w_val);
	if (ret != PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
    {
        
        
        std::ostringstream s;
        s << "Failed to set Axis 1 acceleration. Error number is " << ret << endl;
        this->set_status(s.str());
    }
	

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::write_Axis1Acceleration
}

//--------------------------------------------------------
/**
 *	Read Axes1to3Positions attribute
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 3
 */
//--------------------------------------------------------
void PowerPMACAxes::read_Axes1to3Positions(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMACAxes::read_Axes1to3Positions(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::read_Axes1to3Positions) ENABLED START -----*/
    std::vector<double> dvector;
    int ret =  ppmaccontrol->PowerPMACcontrol_axesGetCurrentPositions(1,3,dvector);
    if (ret == PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
    {
        for(size_t i=0; i<dvector.size(); i++)
        {
            attr_Axes1to3Positions_read[i] = dvector.at(i);
        }
        //	Set the attribute value
        attr.set_value(attr_Axes1to3Positions_read, dvector.size());
    }
    else
    {
        std::ostringstream s;
        s << "Failed to get axes 1,2,3 current positions. Error number is " << ret << endl;
        this->set_status(s.str());
    }
    
    
    


	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::read_Axes1to3Positions
}
//--------------------------------------------------------
/**
 *	Read Motor1to3Status attribute
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum  max = 3
 */
//--------------------------------------------------------
void PowerPMACAxes::read_Motor1to3Status(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMACAxes::read_Motor1to3Status(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::read_Motor1to3Status) ENABLED START -----*/

    std::vector<uint64_t> status64vector;
    int ret =  ppmaccontrol->PowerPMACcontrol_getMultiMotorStatus(1,3, status64vector);
    if (ret == PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
    {
        for (size_t i=0; i<status64vector.size(); i++)
        {
            std::stringstream stream;
            stream << std::hex << std::setw(16) << std::setfill('0') << status64vector.at(i);
            std::string sstatus;
            stream >> sstatus;
            attr_Motor1to3Status_read[i] = Tango::string_dup(sstatus.c_str());
        }
        //	Set the attribute value
        attr.set_value(attr_Motor1to3Status_read, 3);
    }
    else
    {
        std::ostringstream s;
        s << "Failed to get Axis 1-3 status. Error number is " << ret << endl;
        this->set_status(s.str());
    }
    
	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::read_Motor1to3Status
}
//--------------------------------------------------------
/**
 *	Read CS1to3Status attribute
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum  max = 3
 */
//--------------------------------------------------------
void PowerPMACAxes::read_CS1to3Status(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMACAxes::read_CS1to3Status(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::read_CS1to3Status) ENABLED START -----*/


    std::vector<uint64_t> status64vector;
    int ret =  ppmaccontrol->PowerPMACcontrol_getMultiCoordStatus(1,3, status64vector);
    if (ret == PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
    {
        for (size_t i=0; i<status64vector.size(); i++)
        {
            std::stringstream stream;
            stream << std::hex << std::setw(16) << std::setfill('0') << status64vector.at(i);
            std::string sstatus;
            stream >> sstatus;
            attr_CS1to3Status_read[i] = Tango::string_dup(sstatus.c_str());
        }
        //	Set the attribute value
        attr.set_value(attr_CS1to3Status_read, 3);
    }
    else
    {
        std::ostringstream s;
        s << "Failed to get Axis 1-3 status. Error number is " << ret << endl;
        this->set_status(s.str());
    }
    

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::read_CS1to3Status
}
//--------------------------------------------------------
/**
 *	Read Axes1to3Velocities attribute
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 3
 */
//--------------------------------------------------------
void PowerPMACAxes::read_Axes1to3Velocities(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMACAxes::read_Axes1to3Velocities(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::read_Axes1to3Velocities) ENABLED START -----*/


    std::vector<double> dvector;
    int ret =  ppmaccontrol->PowerPMACcontrol_axesGetVelocities(1,3,dvector);
    if (ret == PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
    {
        for(size_t i=0; i<dvector.size(); i++)
        {
            attr_Axes1to3Velocities_read[i] = dvector.at(i);
        }

        //	Set the attribute value
        attr.set_value(attr_Axes1to3Velocities_read, dvector.size());
    }
    else
    {
        std::ostringstream s;
        s << "Failed to get axes 1,2,3 current positions. Error number is " << ret << endl;
        this->set_status(s.str());
    }
    
    
    

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::read_Axes1to3Velocities
}
//--------------------------------------------------------
/**
 *	Read Axis1SoftwareLimits attribute
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 2
 */
//--------------------------------------------------------
void PowerPMACAxes::read_Axis1SoftwareLimits(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PowerPMACAxes::read_Axis1SoftwareLimits(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::read_Axis1SoftwareLimits) ENABLED START -----*/

    double max;
    double min;
    int ret =  ppmaccontrol->PowerPMACcontrol_axisGetSoftwareLimits(1,max, min);
    if (ret == PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
    {
        attr_Axis1SoftwareLimits_read[0] = max;
        attr_Axis1SoftwareLimits_read[1] = min;

        //	Set the attribute value
        attr.set_value(attr_Axis1SoftwareLimits_read, 2);
    }
    else
    {
        std::ostringstream s;
        s << "Failed to get axes 1 software limits. Error number is " << ret << endl;
        this->set_status(s.str());
    }
	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::read_Axis1SoftwareLimits
}

//--------------------------------------------------------
/**
 *	Write Axis1SoftwareLimits attribute values to hardware.
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum  max = 2
 */
//--------------------------------------------------------
void PowerPMACAxes::write_Axis1SoftwareLimits(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "PowerPMACAxes::write_Axis1SoftwareLimits(Tango::Attribute &attr) entering... " << endl;
	
	//	Retrieve number of write values
	int	w_length = attr.get_write_value_length();

	//	Retrieve pointer on write values (Do not delete !)
	const Tango::DevDouble	*w_val;
	attr.get_write_value(w_val);
	
	/*----- PROTECTED REGION ID(PowerPMACAxes::write_Axis1SoftwareLimits) ENABLED START -----*/

    if (w_length < 2)
    {
        std::ostringstream s;
        s << "Failed to set axes 1 software limits. Two doubles (max, min) must be set. " << endl;
        this->set_status(s.str());
    }
    
	int ret =ppmaccontrol->PowerPMACcontrol_axisSetSoftwareLimits(1, w_val[0], w_val[1]);
	if (ret != PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
    {
        
        
        std::ostringstream s;
        s << "Failed to set Axis 1 software limits. Error number is " << ret << endl;
        this->set_status(s.str());
    }

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::write_Axis1SoftwareLimits
}


//--------------------------------------------------------
/**
 *	Method      : PowerPMACAxes::PowerPMACAxesClass::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *	              for specified device.
 */
//--------------------------------------------------------
void PowerPMACAxes::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(PowerPMACAxes::Class::add_dynamic_attributes) ENABLED START -----*/

	//	Add your own code to create and add dynamic attributes if any

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::Class::add_dynamic_attributes

}



//========================================================
//	Command execution methods
//========================================================

//--------------------------------------------------------
/**
 *	Execute the AxisHome command:
 *	Description: 
 *
 *	@param argin The number of the axis to home
 *	@returns 
 */
//--------------------------------------------------------
void PowerPMACAxes::axis_home(Tango::DevLong argin)
{
	DEBUG_STREAM << "PowerPMACAxes::AxisHome()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::axis_home) ENABLED START -----*/

	//	Add your own code
    int ret =  ppmaccontrol->PowerPMACcontrol_axisHome(argin);
    
    std::ostringstream s;
    if (ret != PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
        s << "Failed to home the axis<" << argin << ">. Error number is " << ret << endl;
    else
        s << "Axis <" << argin << "> Homing success" << endl;
    this->set_status(s.str());
	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::axis_home

}

//--------------------------------------------------------
/**
 *	Execute the AxisStop command:
 *	Description: Stop current movment of the specified Axis
 *
 *	@param argin The number of the axis to stop
 *	@returns 
 */
//--------------------------------------------------------
void PowerPMACAxes::axis_stop(Tango::DevLong argin)
{
	DEBUG_STREAM << "PowerPMACAxes::AxisStop()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::axis_stop) ENABLED START -----*/

	//	Add your own code
    int ret =  ppmaccontrol->PowerPMACcontrol_axisStop(argin);
    
    std::ostringstream s;
    if (ret != PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
        s << "Failed to stop the axis <" << argin << ">. Error number is " << ret << endl;
    else
        s << "Axis <" << argin << "> Stop success" << endl;
    this->set_status(s.str());

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::axis_stop

}

//--------------------------------------------------------
/**
 *	Execute the AxisAbort command:
 *	Description: Abort current movment of the specified Axis (without deceleration)
 *
 *	@param argin The number of the axis to abort
 *	@returns 
 */
//--------------------------------------------------------
void PowerPMACAxes::axis_abort(Tango::DevLong argin)
{
	DEBUG_STREAM << "PowerPMACAxes::AxisAbort()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::axis_abort) ENABLED START -----*/

	//	Add your own code
	//	Add your own code
    int ret =  ppmaccontrol->PowerPMACcontrol_axisAbort(argin);
    
    std::ostringstream s;
    if (ret != PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
        s << "Failed to abort the axis <" << argin << ">. Error number is " << ret << endl;
    else
        s << "Axis <" << argin << "> abort success" << endl;
    this->set_status(s.str());

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::axis_abort

}

//--------------------------------------------------------
/**
 *	Execute the AxisMovePositive command:
 *	Description: Move forward the specified Axis
 *
 *	@param argin The number of the axis to move forward
 *	@returns 
 */
//--------------------------------------------------------
void PowerPMACAxes::axis_move_positive(Tango::DevLong argin)
{
	DEBUG_STREAM << "PowerPMACAxes::AxisMovePositive()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::axis_move_positive) ENABLED START -----*/

	//	Add your own code
    int ret =  ppmaccontrol->PowerPMACcontrol_axisMovePositive(argin);
    
    std::ostringstream s;
    if (ret != PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
        s << "Failed to move forward the axis <" << argin << ">. Error number is " << ret << endl;
    else
        s << "Axis <" << argin << "> move forward success" << endl;
    this->set_status(s.str());

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::axis_move_positive

}

//--------------------------------------------------------
/**
 *	Execute the AxisMoveNegative command:
 *	Description: Move backward the specified Axis
 *
 *	@param argin The number of the axis to move backward
 *	@returns 
 */
//--------------------------------------------------------
void PowerPMACAxes::axis_move_negative(Tango::DevLong argin)
{
	DEBUG_STREAM << "PowerPMACAxes::AxisMoveNegative()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::axis_move_negative) ENABLED START -----*/

	//	Add your own code
    int ret =  ppmaccontrol->PowerPMACcontrol_axisMoveNegative(argin);
    
    std::ostringstream s;
    if (ret != PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
        s << "Failed to move backward the axis <" << argin << ">. Error number is " << ret << endl;
    else
        s << "Axis <" << argin << "> move backward success" << endl;
    this->set_status(s.str());

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::axis_move_negative

}

//--------------------------------------------------------
/**
 *	Execute the Axis1MoveAbs command:
 *	Description: Move the Axis 1 to the absolute position
 *
 *	@param argin The absolute position
 *	@returns 
 */
//--------------------------------------------------------
void PowerPMACAxes::axis1_move_abs(Tango::DevDouble argin)
{
	DEBUG_STREAM << "PowerPMACAxes::Axis1MoveAbs()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::axis1_move_abs) ENABLED START -----*/

	//	Add your own code
	//	Add your own code
	//	Add your own code
    int ret =  ppmaccontrol->PowerPMACcontrol_axisMoveAbs(1,argin);
    std::ostringstream s;
    if (ret != PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
        s << "Failed to move the axis 1 to the absolute position <" << argin << ">. Error number is " << ret << endl;
    else
        s << "Axis 1 absolute move success" << endl;
    this->set_status(s.str());

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::axis1_move_abs

}

//--------------------------------------------------------
/**
 *	Execute the Axis1MoveRel command:
 *	Description: Move the Axis 1 to the relative position
 *
 *	@param argin The relative position
 *	@returns 
 */
//--------------------------------------------------------
void PowerPMACAxes::axis1_move_rel(Tango::DevDouble argin)
{
	DEBUG_STREAM << "PowerPMACAxes::Axis1MoveRel()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::axis1_move_rel) ENABLED START -----*/

	//	Add your own code
	//	Add your own code
    int ret =  ppmaccontrol->PowerPMACcontrol_axisMoveRel(1,argin);
    std::ostringstream s;
    if (ret != PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
        s << "Failed to move the axis 1 to the relative position <" << argin << ">. Error number is " << ret << endl;
    else
        s << "Axis 1 relative move success" << endl;
    this->set_status(s.str());

	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::axis1_move_rel

}

//--------------------------------------------------------
/**
 *	Execute the Axis1DefinePosition command:
 *	Description: Define the position of the axis 1.
 *
 *	@param argin New position
 *	@returns 
 */
//--------------------------------------------------------
void PowerPMACAxes::axis1_define_position(Tango::DevDouble argin)
{
	DEBUG_STREAM << "PowerPMACAxes::Axis1DefinePosition()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(PowerPMACAxes::axis1_define_position) ENABLED START -----*/

	//	Add your own code
    int ret =  ppmaccontrol->PowerPMACcontrol_axisDefCurrentPos(1,argin);
    std::ostringstream s;
    if (ret != PowerPMACcontrol_ns::PowerPMACcontrol::PPMACcontrolNoError)
        s << "Failed to define the position of the axis 1 to the new position <" << argin << ">. Error number is " << ret << endl;
    else
        s << "Axis 1 define position success" << endl;
    this->set_status(s.str());
	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::axis1_define_position

}


	/*----- PROTECTED REGION ID(PowerPMACAxes::namespace_ending) ENABLED START -----*/


	/*----- PROTECTED REGION END -----*/	//	PowerPMACAxes::namespace_ending
} //	namespace
