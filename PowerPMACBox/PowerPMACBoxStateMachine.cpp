/*----- PROTECTED REGION ID(PowerPMACBoxStateMachine.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        PowerPMACBoxStateMachine.cpp
//
// description : C++ source for the �name� and its alowed
//               methods for commands and attributes
//
// project :     PowerPMACTangoDev.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================



#include <PowerPMACBox.h>
#include <PowerPMACBoxClass.h>

/*----- PROTECTED REGION END -----*/


/*
 * PowerPMACBox states description:
 *
 * ON :	The device controller has a connection to Power PMAC and is ready to communicate with it. 
 * OFF :	The device controller has no connection to Power PMAC. 'Init' command has to be submitted to start communicating with Power PMAC. 
 * UNKNOWN :	The device controller is in the Unknown state. 
 */

namespace PowerPMACBox_ns
{

//=================================================
//		Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : PowerPMACBox::is_P1000State_allowed()
 *	Description : Execution allowed for P1000 attribute.
 */
//--------------------------------------------------------

bool PowerPMACBox::is_P1000_allowed(Tango::AttReqType type)
{
	//	Check if access type.
	if ( type!=Tango::READ_REQ )
	{
			//	Not any excluded states for P1000 attribute in WRITE access.
		
	/*----- PROTECTED REGION ID(PowerPMACBox::P1000StateAllowed_WRITE) ENABLED START -----*/
	if (
		get_state() == Tango::OFF	|| 
		get_state() == Tango::UNKNOWN)
	{
        return false;
    }
	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::P1000StateAllowed_WRITE

		return true;
	}
	else
		//	Not any excluded states for P1000 attribute in READ access.
	
	/*----- PROTECTED REGION ID(PowerPMACBox::read_P1000StateAllowed_READ) ENABLED START -----*/
	if (
		get_state() == Tango::OFF	|| 
		get_state() == Tango::UNKNOWN)
	{
        return false;
    }
	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::read_P1000StateAllowed_READ

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMACBox::is_GeneralStatusState_allowed()
 *	Description : Execution allowed for GeneralStatus attribute.
 */
//--------------------------------------------------------

bool PowerPMACBox::is_GeneralStatus_allowed(Tango::AttReqType type)
{
	if (	//	Compare device state with not allowed states for READ 
		get_state() == Tango::OFF	|| 
		get_state() == Tango::UNKNOWN)
	{
	
	/*----- PROTECTED REGION ID(PowerPMACBox::read_GeneralStatusStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::read_GeneralStatusStateAllowed_READ

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMACBox::is_VersionState_allowed()
 *	Description : Execution allowed for Version attribute.
 */
//--------------------------------------------------------

bool PowerPMACBox::is_Version_allowed(Tango::AttReqType type)
{
	if (	//	Compare device state with not allowed states for READ 
		get_state() == Tango::OFF	|| 
		get_state() == Tango::UNKNOWN)
	{
	
	/*----- PROTECTED REGION ID(PowerPMACBox::read_VersionStateAllowed_READ) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::read_VersionStateAllowed_READ

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMACBox::is_Plc8StatusState_allowed()
 *	Description : Execution allowed for Plc8Status attribute.
 */
//--------------------------------------------------------

bool PowerPMACBox::is_Plc8Status_allowed(Tango::AttReqType type)
{
	if (	//	Compare device state with not allowed states for READ 
		get_state() == Tango::OFF	|| 
		get_state() == Tango::UNKNOWN)
	{
	
	/*----- PROTECTED REGION ID(PowerPMACBox::read_Plc8StatusStateAllowed_READ) ENABLED START -----*/
	if (
		get_state() == Tango::OFF	|| 
		get_state() == Tango::UNKNOWN)
	{
        return false;
    }
	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::read_Plc8StatusStateAllowed_READ

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMACBox::is_CS1ProgStatusState_allowed()
 *	Description : Execution allowed for CS1ProgStatus attribute.
 */
//--------------------------------------------------------

bool PowerPMACBox::is_CS1ProgStatus_allowed(Tango::AttReqType type)
{
	if (	//	Compare device state with not allowed states for READ 
		get_state() == Tango::OFF	|| 
		get_state() == Tango::UNKNOWN)
	{
	
	/*----- PROTECTED REGION ID(PowerPMACBox::read_CS1ProgStatusStateAllowed_READ) ENABLED START -----*/
    if (
		get_state() == Tango::OFF	|| 
		get_state() == Tango::UNKNOWN)
	{
        return false;
    }
	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::read_CS1ProgStatusStateAllowed_READ

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMACBox::is_P1State_allowed()
 *	Description : Execution allowed for P1 attribute.
 */
//--------------------------------------------------------

bool PowerPMACBox::is_P1_allowed(Tango::AttReqType type)
{
	if (	//	Compare device state with not allowed states for READ 
		get_state() == Tango::OFF	|| 
		get_state() == Tango::UNKNOWN)
	{
	
	/*----- PROTECTED REGION ID(PowerPMACBox::read_P1StateAllowed_READ) ENABLED START -----*/
	if (
		get_state() == Tango::OFF	|| 
		get_state() == Tango::UNKNOWN)
	{
        return false;
    }
	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::read_P1StateAllowed_READ

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMACBox::is_BufferState_allowed()
 *	Description : Execution allowed for Buffer attribute.
 */
//--------------------------------------------------------

bool PowerPMACBox::is_Buffer_allowed(Tango::AttReqType type)
{
	if (	//	Compare device state with not allowed states for READ 
		get_state() == Tango::OFF	|| 
		get_state() == Tango::UNKNOWN)
	{
	
	/*----- PROTECTED REGION ID(PowerPMACBox::read_BufferStateAllowed_READ) ENABLED START -----*/
	if (
		get_state() == Tango::OFF	|| 
		get_state() == Tango::UNKNOWN)
	{
        return false;
    }
	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::read_BufferStateAllowed_READ

		return false;
	}
	return true;
}


	/*----- PROTECTED REGION ID(PowerPMACBox::are_dynamic_attributes_allowed) ENABLED START -----*/

	//	Add your code to check if dynamic attributes are alowed

	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::are_dynamic_attributes_allowed


//=================================================
//		Commands Allowed Methods
//=================================================


//--------------------------------------------------------
/**
 *	Method      : PowerPMACBox::is_ResetState_allowed()
 *	Description : Execution allowed for Reset command.
 */
//--------------------------------------------------------

bool PowerPMACBox::is_Reset_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::OFF	|| 
		get_state() == Tango::UNKNOWN)
	{

	/*----- PROTECTED REGION ID(PowerPMACBox::ResetStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::ResetStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMACBox::is_DownloadState_allowed()
 *	Description : Execution allowed for Download command.
 */
//--------------------------------------------------------

bool PowerPMACBox::is_Download_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::OFF	|| 
		get_state() == Tango::UNKNOWN)
	{

	/*----- PROTECTED REGION ID(PowerPMACBox::DownloadStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::DownloadStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMACBox::is_EnablePlcState_allowed()
 *	Description : Execution allowed for EnablePlc command.
 */
//--------------------------------------------------------

bool PowerPMACBox::is_EnablePlc_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::OFF	|| 
		get_state() == Tango::UNKNOWN)
	{

	/*----- PROTECTED REGION ID(PowerPMACBox::EnablePlcStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::EnablePlcStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMACBox::is_DisablePlcState_allowed()
 *	Description : Execution allowed for DisablePlc command.
 */
//--------------------------------------------------------

bool PowerPMACBox::is_DisablePlc_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::OFF	|| 
		get_state() == Tango::UNKNOWN)
	{

	/*----- PROTECTED REGION ID(PowerPMACBox::DisablePlcStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::DisablePlcStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMACBox::is_RunMprogState_allowed()
 *	Description : Execution allowed for RunMprog command.
 */
//--------------------------------------------------------

bool PowerPMACBox::is_RunMprog_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::OFF	|| 
		get_state() == Tango::UNKNOWN)
	{

	/*----- PROTECTED REGION ID(PowerPMACBox::RunMprogStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::RunMprogStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMACBox::is_AbortMprogState_allowed()
 *	Description : Execution allowed for AbortMprog command.
 */
//--------------------------------------------------------

bool PowerPMACBox::is_AbortMprog_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::OFF	|| 
		get_state() == Tango::UNKNOWN)
	{

	/*----- PROTECTED REGION ID(PowerPMACBox::AbortMprogStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::AbortMprogStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMACBox::is_GetVariableState_allowed()
 *	Description : Execution allowed for GetVariable command.
 */
//--------------------------------------------------------

bool PowerPMACBox::is_GetVariable_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::OFF	|| 
		get_state() == Tango::UNKNOWN)
	{

	/*----- PROTECTED REGION ID(PowerPMACBox::GetVariableStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::GetVariableStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMACBox::is_SetVariableState_allowed()
 *	Description : Execution allowed for SetVariable command.
 */
//--------------------------------------------------------

bool PowerPMACBox::is_SetVariable_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::OFF	|| 
		get_state() == Tango::UNKNOWN)
	{

	/*----- PROTECTED REGION ID(PowerPMACBox::SetVariableStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::SetVariableStateAllowed

		return false;
	}
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : PowerPMACBox::is_AbortState_allowed()
 *	Description : Execution allowed for Abort command.
 */
//--------------------------------------------------------

bool PowerPMACBox::is_Abort_allowed(const CORBA::Any &any)
{
	if (	//	Compare device state with not allowed states for command 
		get_state() == Tango::OFF	|| 
		get_state() == Tango::UNKNOWN)
	{

	/*----- PROTECTED REGION ID(PowerPMACBox::AbortStateAllowed) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::AbortStateAllowed

		return false;
	}
	return true;
}


	/*----- PROTECTED REGION ID(PowerPMACBox::are_dynamic_commands_allowed) ENABLED START -----*/

	//	Add your code to check if dynamic commands are alowed

	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::are_dynamic_commands_allowed

}	// namespace PowerPMACBox_ns
