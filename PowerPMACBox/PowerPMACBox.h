/*----- PROTECTED REGION ID(PowerPMACBox.h) ENABLED START -----*/
//=============================================================================
//
// file :        PowerPMACBox.h
//
// description : Include for the PowerPMACBox class.
//
// project :     PowerPMACTangoDev.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef POWERPMACBOX_H
#define POWERPMACBOX_H


#include <tango.h>
#include <PowerPMACcontrol.h>


/*----- PROTECTED REGION END -----*/


/**
 *	PowerPMACBox class Description:
 *	
 */

namespace PowerPMACBox_ns
{
	/*----- PROTECTED REGION ID(PowerPMACBox::Additional Class Declarations) ENABLED START -----*/

		//		Additional Class Declarations

	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::Additional Class Declarations


class PowerPMACBox : public Tango::Device_4Impl
{


	/*----- PROTECTED REGION ID(PowerPMACBox::Data Members) ENABLED START -----*/

	//		Add your own data members
private:
    PowerPMACcontrol_ns::PowerPMACcontrol* ppmaccontrol;
	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::Data Members


//	Device property data members
public:		//	IpAddress:	IP address of the Power PMAC
	string	ipAddress;
	//	Username:	Username for Power PMAC SSH connection
	string	username;
	//	Password:	Password for Power PMAC SSH connection
	string	password;
	

//	Attribute data members
public:
	Tango::DevFloat	*attr_P1000_read;
	Tango::DevULong	*attr_GeneralStatus_read;
	Tango::DevString	*attr_Version_read;
	Tango::DevString	*attr_Plc8Status_read;
	Tango::DevString	*attr_CS1ProgStatus_read;
	Tango::DevFloat	*attr_P1_read;
	Tango::DevString	*attr_Buffer_read;



//	Constructors and destructors
public:
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	PowerPMACBox(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	PowerPMACBox(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	PowerPMACBox(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The object destructor.
	 */	
	~PowerPMACBox() {delete_device();};



//	Miscellaneous methods
public:
	/**
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/**
	 *	Initialize the device
	 */
	virtual void init_device();
	/**
	 *	Read the device properties from database
	 */
	 void get_device_property();
	/**
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	/**
	 *	Method      : PowerPMACBox::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	virtual void read_attr_hardware(vector<long> &attr_list);


	/**
	 *	P1000 attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevFloat
	 *	Attr type:	Scalar 
	 */
	virtual void read_P1000(Tango::Attribute &attr);
	virtual void write_P1000(Tango::WAttribute &attr);
	virtual bool is_P1000_allowed(Tango::AttReqType type);



	/**
	 *	GeneralStatus attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevULong
	 *	Attr type:	Scalar 
	 */
	virtual void read_GeneralStatus(Tango::Attribute &attr);
	virtual bool is_GeneralStatus_allowed(Tango::AttReqType type);



	/**
	 *	Version attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevString
	 *	Attr type:	Scalar 
	 */
	virtual void read_Version(Tango::Attribute &attr);
	virtual bool is_Version_allowed(Tango::AttReqType type);



	/**
	 *	Plc8Status attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevString
	 *	Attr type:	Scalar 
	 */
	virtual void read_Plc8Status(Tango::Attribute &attr);
	virtual bool is_Plc8Status_allowed(Tango::AttReqType type);



	/**
	 *	CS1ProgStatus attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevString
	 *	Attr type:	Scalar 
	 */
	virtual void read_CS1ProgStatus(Tango::Attribute &attr);
	virtual bool is_CS1ProgStatus_allowed(Tango::AttReqType type);



	/**
	 *	P1 attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevFloat
	 *	Attr type:	Scalar 
	 */
	virtual void read_P1(Tango::Attribute &attr);
	virtual bool is_P1_allowed(Tango::AttReqType type);



	/**
	 *	Buffer attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevString
	 *	Attr type:	Spectrum  max = 256
	 */
	virtual void read_Buffer(Tango::Attribute &attr);
	virtual bool is_Buffer_allowed(Tango::AttReqType type);



	/**
	 *	Method      : PowerPMACBox::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
		void add_dynamic_attributes();

//	Command related methods
public: 


	/**
	 *	Command Reset related methods.
	 */
	void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);

	/**
	 *	Command Download related methods.
	 */
	void download(Tango::DevString argin);
	virtual bool is_Download_allowed(const CORBA::Any &any);

	/**
	 *	Command EnablePlc related methods.
	 */
	void enable_plc(Tango::DevLong argin);
	virtual bool is_EnablePlc_allowed(const CORBA::Any &any);

	/**
	 *	Command DisablePlc related methods.
	 */
	void disable_plc(Tango::DevLong argin);
	virtual bool is_DisablePlc_allowed(const CORBA::Any &any);

	/**
	 *	Command RunMprog related methods.
	 */
	void run_mprog(Tango::DevLong argin);
	virtual bool is_RunMprog_allowed(const CORBA::Any &any);

	/**
	 *	Command AbortMprog related methods.
	 */
	void abort_mprog(Tango::DevLong argin);
	virtual bool is_AbortMprog_allowed(const CORBA::Any &any);

	/**
	 *	Command GetVariable related methods.
	 */
	Tango::DevFloat get_variable(Tango::DevString argin);
	virtual bool is_GetVariable_allowed(const CORBA::Any &any);

	/**
	 *	Command SetVariable related methods.
	 */
	void set_variable(const Tango::DevVarDoubleStringArray *argin);
	virtual bool is_SetVariable_allowed(const CORBA::Any &any);

	/**
	 *	Command Abort related methods.
	 */
	void abort();
	virtual bool is_Abort_allowed(const CORBA::Any &any);



	/*----- PROTECTED REGION ID(PowerPMACBox::Additional Method prototypes) ENABLED START -----*/

	//	Additional Method prototypes

	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::Additional Method prototypes

};

	/*----- PROTECTED REGION ID(PowerPMACBox::Additional Classes Definitions) ENABLED START -----*/

	//	Additional Classes definitions

	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::Additional Classes Definitions

} //	namespace

#endif	//	POWERPMACBOX_H
