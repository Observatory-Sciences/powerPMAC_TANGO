/*----- PROTECTED REGION ID(PowerPMACBoxClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        PowerPMACBoxClass.h
//
// description : Include for the PowerPMACBoxClass root class.
//               This class is the singleton class for.
//               the PowerPMACBox device class..
//               It contains all properties and methods which the .
//               PowerPMACBox requires only once e.g. the commands.
//
// project :     PowerPMACTangoDev.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef POWERPMACBOXCLASS_H
#define POWERPMACBOXCLASS_H

#include <tango.h>
#include <PowerPMACBox.h>

/*----- PROTECTED REGION END -----*/

namespace PowerPMACBox_ns
{
	/*----- PROTECTED REGION ID(PowerPMACBox::classes for dynamic creation) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::classes for dynamic creation



//=========================================
//	Define classes for attributes
//=========================================
//	Attribute P1000 class definition
class P1000Attrib: public Tango::Attr
{
public:
	P1000Attrib():Attr("P1000",
	                   Tango::DEV_FLOAT, Tango::READ_WRITE) {};
	~P1000Attrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<PowerPMACBox *>(dev))->read_P1000(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<PowerPMACBox *>(dev))->write_P1000(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<PowerPMACBox *>(dev))->is_P1000_allowed(ty);}
};

//	Attribute GeneralStatus class definition
class GeneralStatusAttrib: public Tango::Attr
{
public:
	GeneralStatusAttrib():Attr("GeneralStatus",
	                   Tango::DEV_ULONG, Tango::READ) {};
	~GeneralStatusAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<PowerPMACBox *>(dev))->read_GeneralStatus(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<PowerPMACBox *>(dev))->is_GeneralStatus_allowed(ty);}
};

//	Attribute Version class definition
class VersionAttrib: public Tango::Attr
{
public:
	VersionAttrib():Attr("Version",
	                   Tango::DEV_STRING, Tango::READ) {};
	~VersionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<PowerPMACBox *>(dev))->read_Version(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<PowerPMACBox *>(dev))->is_Version_allowed(ty);}
};

//	Attribute Plc8Status class definition
class Plc8StatusAttrib: public Tango::Attr
{
public:
	Plc8StatusAttrib():Attr("Plc8Status",
	                   Tango::DEV_STRING, Tango::READ) {};
	~Plc8StatusAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<PowerPMACBox *>(dev))->read_Plc8Status(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<PowerPMACBox *>(dev))->is_Plc8Status_allowed(ty);}
};

//	Attribute CS1ProgStatus class definition
class CS1ProgStatusAttrib: public Tango::Attr
{
public:
	CS1ProgStatusAttrib():Attr("CS1ProgStatus",
	                   Tango::DEV_STRING, Tango::READ) {};
	~CS1ProgStatusAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<PowerPMACBox *>(dev))->read_CS1ProgStatus(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<PowerPMACBox *>(dev))->is_CS1ProgStatus_allowed(ty);}
};

//	Attribute P1 class definition
class P1Attrib: public Tango::Attr
{
public:
	P1Attrib():Attr("P1",
	                   Tango::DEV_FLOAT, Tango::READ) {};
	~P1Attrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<PowerPMACBox *>(dev))->read_P1(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<PowerPMACBox *>(dev))->is_P1_allowed(ty);}
};

//	Attribute Buffer class definition
class BufferAttrib: public Tango::SpectrumAttr
{
public:
	BufferAttrib():SpectrumAttr("Buffer",
	                   Tango::DEV_STRING, Tango::READ, 256) {};
	~BufferAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<PowerPMACBox *>(dev))->read_Buffer(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<PowerPMACBox *>(dev))->is_Buffer_allowed(ty);}
};





//=========================================
//	Define classes for commands
//=========================================
//	Command Reset class definition
class ResetClass : public Tango::Command
{
public:
	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PowerPMACBox *>(dev))->is_Reset_allowed(any);}
};

//	Command Download class definition
class DownloadClass : public Tango::Command
{
public:
	DownloadClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	DownloadClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~DownloadClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PowerPMACBox *>(dev))->is_Download_allowed(any);}
};

//	Command EnablePlc class definition
class EnablePlcClass : public Tango::Command
{
public:
	EnablePlcClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	EnablePlcClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~EnablePlcClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PowerPMACBox *>(dev))->is_EnablePlc_allowed(any);}
};

//	Command DisablePlc class definition
class DisablePlcClass : public Tango::Command
{
public:
	DisablePlcClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	DisablePlcClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~DisablePlcClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PowerPMACBox *>(dev))->is_DisablePlc_allowed(any);}
};

//	Command RunMprog class definition
class RunMprogClass : public Tango::Command
{
public:
	RunMprogClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	RunMprogClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~RunMprogClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PowerPMACBox *>(dev))->is_RunMprog_allowed(any);}
};

//	Command AbortMprog class definition
class AbortMprogClass : public Tango::Command
{
public:
	AbortMprogClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AbortMprogClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AbortMprogClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PowerPMACBox *>(dev))->is_AbortMprog_allowed(any);}
};

//	Command GetVariable class definition
class GetVariableClass : public Tango::Command
{
public:
	GetVariableClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetVariableClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetVariableClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PowerPMACBox *>(dev))->is_GetVariable_allowed(any);}
};

//	Command SetVariable class definition
class SetVariableClass : public Tango::Command
{
public:
	SetVariableClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetVariableClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetVariableClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PowerPMACBox *>(dev))->is_SetVariable_allowed(any);}
};

//	Command Abort class definition
class AbortClass : public Tango::Command
{
public:
	AbortClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AbortClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AbortClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<PowerPMACBox *>(dev))->is_Abort_allowed(any);}
};





/**
 *	The TemplateDevServClass singleton definition
 */

class
#ifdef _TG_WINDOWS_
	__declspec(dllexport)
#endif
	PowerPMACBoxClass : public Tango::DeviceClass
{
	/*----- PROTECTED REGION ID(PowerPMACBox::Additionnal DServer data members) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	PowerPMACBox::Additionnal DServer data members



public:
//	write class properties data members
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static PowerPMACBoxClass *init(const char *);
	static PowerPMACBoxClass *instance();
	~PowerPMACBoxClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	PowerPMACBoxClass(string &);
	static PowerPMACBoxClass *_instance;
	void command_factory();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	void get_class_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
	void create_static_attribute_list(vector<Tango::Attr *> &);
	void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
	vector<string>	defaultAttList;


};

}	//	namespace

#endif	//	POWERPMACBOXCLASS_H

